// Plugins
plugins {
   //id "checkstyle"
   id "application"
   id "com.github.spotbugs" version "5.0.13"
   id "jacoco"
}

run {
 standardInput = System.in
}

// apply
apply plugin: 'application'
//apply plugin: 'checkstyle'
apply plugin: 'jacoco'

compileJava.options.encoding = 'UTF-8'

// Repositories
repositories {
   mavenCentral()
   gradlePluginPortal()
}

// Dependencies
dependencies {
   implementation 'com.io7m.xom:xom:1.2.+'
   implementation 'net.sourceforge.nekohtml:nekohtml:1.9.+'
   testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
   testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
   testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
}

// given path [src\main\java\main\Main.java] 
mainClassName = 'main.Main' // update ***

// Unit Test task
task unitTest( type: Test ) {
   useJUnitPlatform()
}

// Gradle Jacoco Report
jacocoTestReport {
   dependsOn test // Ensure tests run before generating the report
   reports {
      html.required = true
      xml.required = false
      csv.required = false
      html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
   }
}

// Checkstyle
//checkstyle {
//   toolVersion = '8.8'
//    config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
//    ignoreFailures = true  
//   showViolations = false
//}
//tasks.withType(Checkstyle).configureEach {
//   source = sourceSets.main.allSource // tells Checkstyle to check all source files in main source set
//   include '**/*.java' // include all java files
//}

// JUnit 5
test {
   useJUnitPlatform() // enables
   testLogging { //settings for JUnit5
      events "passed", "skipped", "failed"
   }
}

// SpotBugs
tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
   reports {
      html.required.set(true)
      xml.required.set(false)
   }
   effort = 'max'
   reportLevel = 'low'
}

// Jacoco HTML report part of build (wont generate if no test)
build.finalizedBy jacocoTestReport // @ end