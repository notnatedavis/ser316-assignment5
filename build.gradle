// Plugins
plugins {
  id "checkstyle"
  id 'jacoco'

}
// apply
apply plugin: 'application'

mainClassName = 'main.java.memoranda.Start' // correct

compileJava.options.encoding = 'UTF-8'

// Repositories
repositories {
  mavenCentral()
  gradlePluginPortal()
}

// Dependencies
dependencies {
  implementation 'com.io7m.xom:xom:1.2.+'
  implementation 'net.sourceforge.nekohtml:nekohtml:1.9.+'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
  implementation files('cls/') // update ?
}

apply plugin: 'checkstyle'
checkstyle {
  // keep checkstyle quieter
  ignoreFailures = true
  showViolations = false
}
tasks.withType(Checkstyle) {
  checkstyle {
    toolVersion = "8.8"
  }
}

test {
    useJUnitPlatform() // enables
    testLogging { //settings for JUnit5
        events "passed", "skipped", "failed"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'main.java.memoranda.Start'
    }
    archiveBaseName = 'localMemoranda' /// JAR name to create here
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { 
      configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } 
    }
    with jar
}

/*jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}*/